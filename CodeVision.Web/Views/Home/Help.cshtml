@{
    ViewBag.Title = "Help";
}

<h1>Help Topics</h1>
<a href="#CodeSearch">Code Search</a><br/>
<a href="#DependencyGraph">Dependency Graph</a><br/>
<a href="#DataDictionary">Data Dictionary</a><br />

<h2>Code Search</h2>
<a id="CodeSearch"></a>

<h3>Basics</h3>
Simply typing the word and clicking search button is often a good start. Surrond multiple words with double quotes, for example
<blockquote>"Licensed to the Apache Software Foundation"</blockquote>. Boolean operators <mark>AND</mark>, <mark>OR</mark>, <mark>NOT</mark> and parenthesis
are supported:

<blockquote>
    Licensed OR Software<br/>
    +Licensed Software
</blockquote>

Use <mark>*</mark>, <mark>?</mark> for wildcard searches, for example:

<blockquote>
    Licen*<br />
    sof?ware
</blockquote>


In these types of searches the content sources are treated as text and often produce quite a bit of hits.

<h4>Beyond Basics</h4>
Search expression consists of <em>field</em> and <em>term</em> separated by colon (<mark>:</mark>), for example <mark>content:lucene</mark>. If field is ommitted,
the default field of <mark>content</mark> is used. These are currently supported search fields:

<table class="table">
    <thead>
        <tr>
            <th>Field</th>
            <th>Purpose</th>
            <th>Example</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><strong>class</strong></td>
            <td>Find files where this class is declared and defined</td>
            <td>class:Bindings</td>
        </tr>
        <tr>
            <td><strong>method</strong></td>
            <td>Where is this method defined?</td>
            <td>method:GetValueOrNull</td>
        </tr>
        <tr>
            <td><strong>parameter</strong></td>
            <td>Show me methods for the given parameter <strong>name</strong></td>
            <td>parameter:dictionary</td>
        </tr>
        <tr>
            <td><strong>return</strong></td>
            <td>Locate methods returning this <strong>type</strong></td>
            <td>return:double</td>
        </tr>
        <tr>
            <td><strong>base</strong></td>
            <td>Look for the classes derived from the given class</td>
            <td>base:doubledocvalues</td>
        </tr>
        <tr>
            <td><strong>code</strong></td>
            <td>Search within methods only. This can be helpful to ignore noice when too many hits are returned by general query.</td>
            <td>code:"prime*result"</td>
        </tr>

        <tr>
            <td><strong>comment</strong></td>
            <td>I need to see where the given search term used as multi-line or single-line comment</td>
            <td>comment:todo</td>
        </tr>
    </tbody>
</table>

See Apache Lucene <a href="https://lucene.apache.org/core/2_9_4/queryparsersyntax.html">documentation</a> for more details.

<h2>Dependency Graph</h2>
<a id="DependencyGraph"></a>

Dependency graph contains modules (dlls or exe) which were discovered during build, analysis and data collection of projects.
Modules can be search upstream and downstream. Dependency graph can also be used to track Nuget package runtime dependencies
since Nuget package is a contrainer and delivery mechanism of modules.


<h2>Data Dictionary</h2>
<a id="DataDictionary"></a>

Data dictionary is a collection of SQL Server objects which are tables, columns and stored procedures. These objects were discovered
from live version of SQL Server. Each object can be annotated with custom properties.